use iced::widget::{text, button, row, container, Column, Row, horizontal_space, vertical_space};
use iced::{Element, Length, alignment, Renderer, Command};
use iced::theme;

use crate::ui::{Message, UiComponent};
use crate::bluetooth::AirPodsBatteryStatus;
use crate::ui::theme::Theme;
use crate::ui::components::{EnhancedBatteryDisplay, RealTimeBatteryDisplay, ConnectionStatus, battery_icon};

/// Main application window
#[derive(Debug, Clone)]
pub struct MainWindow {
    /// Battery status for the connected AirPods
    battery_status: Option<AirPodsBatteryStatus>,
    /// Whether the application is currently scanning
    is_scanning: bool,
    /// Whether a device is connected
    is_connected: bool,
    /// Name of the connected device
    device_name: Option<String>,
    /// Signal strength (RSSI) if available
    signal_strength: Option<i16>,
    /// Time connected in seconds
    connected_time: Option<u64>,
    /// Animation progress for refresh button
    refresh_animation_progress: f32,
    /// Custom battery display component
    battery_display: Option<RealTimeBatteryDisplay>,
    /// Connection state transition animation
    connection_state_transition: f32,
    /// Window width (for responsive design)
    window_width: u32,
    /// Window height (for responsive design)
    window_height: u32,
    /// Show advanced display options
    show_advanced_display: bool,
    /// Connection status text
    connection_status: String,
    /// Animation progress (0.0-1.0)
    animation_progress: f32,
    /// Connection transition progress (0.0-1.0)
    connection_transition: f32,
}

impl MainWindow {
    /// Create a new main window with the given state
    pub fn new(
        battery_status: Option<AirPodsBatteryStatus>,
        is_scanning: bool,
        is_connected: bool,
        device_name: Option<String>,
        signal_strength: Option<i16>,
        connected_time: Option<u64>,
    ) -> Self {
        Self {
            battery_status,
            is_scanning,
            is_connected,
            device_name,
            signal_strength,
            connected_time,
            refresh_animation_progress: 0.0,
            battery_display: None,
            connection_state_transition: 0.0,
            window_width: 600,
            window_height: 400,
            show_advanced_display: false,
            connection_status: "Not Connected".to_string(),
            animation_progress: 0.0,
            connection_transition: 0.0,
        }
    }
    
    /// Create an empty main window
    pub fn empty() -> Self {
        Self {
            battery_status: None,
            is_scanning: false,
            is_connected: false,
            device_name: None,
            signal_strength: None,
            connected_time: None,
            refresh_animation_progress: 0.0,
            battery_display: None,
            connection_state_transition: 0.0,
            window_width: 600,
            window_height: 400,
            show_advanced_display: false,
            connection_status: "Not Connected".to_string(),
            animation_progress: 0.0,
            connection_transition: 0.0,
        }
    }
    
    /// Set the animation progress for refresh button
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.refresh_animation_progress = progress;
        self
    }
    
    /// Set whether the application is scanning for devices
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }
    
    /// Set the connection state animation progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_state_transition = progress;
        self
    }
    
    /// Set the custom battery display component
    pub fn with_battery_display(mut self, display: RealTimeBatteryDisplay) -> Self {
        self.battery_display = Some(display);
        self
    }
    
    /// Update window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }
    
    /// Toggle advanced display
    pub fn toggle_advanced_display(&mut self) -> Command<Message> {
        self.show_advanced_display = !self.show_advanced_display;
        Command::none()
    }

    /// Get the current display mode
    pub fn is_advanced_display(&self) -> bool {
        self.show_advanced_display
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
use iced::widget::{text, button, row, container, Column, Row, horizontal_space, vertical_space};
use iced::{Element, Length, alignment, Renderer, Command};
use iced::theme;

use crate::ui::{Message, UiComponent};
use crate::bluetooth::AirPodsBatteryStatus;
use crate::ui::theme::Theme;
use crate::ui::components::{EnhancedBatteryDisplay, RealTimeBatteryDisplay, ConnectionStatus, battery_icon};

/// Main application window
#[derive(Debug, Clone)]
pub struct MainWindow {
    /// Battery status for the connected AirPods
    battery_status: Option<AirPodsBatteryStatus>,
    /// Whether the application is currently scanning
    is_scanning: bool,
    /// Whether a device is connected
    is_connected: bool,
    /// Name of the connected device
    device_name: Option<String>,
    /// Signal strength (RSSI) if available
    signal_strength: Option<i16>,
    /// Time connected in seconds
    connected_time: Option<u64>,
    /// Animation progress for refresh button
    refresh_animation_progress: f32,
    /// Custom battery display component
    battery_display: Option<RealTimeBatteryDisplay>,
    /// Connection state transition animation
    connection_state_transition: f32,
    /// Window width (for responsive design)
    window_width: u32,
    /// Window height (for responsive design)
    window_height: u32,
    /// Show advanced display options
    show_advanced_display: bool,
    /// Connection status text
    connection_status: String,
    /// Animation progress (0.0-1.0)
    animation_progress: f32,
    /// Connection transition progress (0.0-1.0)
    connection_transition: f32,
}

impl MainWindow {
    /// Create a new main window with the given state
    pub fn new(
        battery_status: Option<AirPodsBatteryStatus>,
        is_scanning: bool,
        is_connected: bool,
        device_name: Option<String>,
        signal_strength: Option<i16>,
        connected_time: Option<u64>,
    ) -> Self {
        Self {
            battery_status,
            is_scanning,
            is_connected,
            device_name,
            signal_strength,
            connected_time,
            refresh_animation_progress: 0.0,
            battery_display: None,
            connection_state_transition: 0.0,
            window_width: 600,
            window_height: 400,
            show_advanced_display: false,
            connection_status: "Not Connected".to_string(),
            animation_progress: 0.0,
            connection_transition: 0.0,
        }
    }
    
    /// Create an empty main window
    pub fn empty() -> Self {
        Self {
            battery_status: None,
            is_scanning: false,
            is_connected: false,
            device_name: None,
            signal_strength: None,
            connected_time: None,
            refresh_animation_progress: 0.0,
            battery_display: None,
            connection_state_transition: 0.0,
            window_width: 600,
            window_height: 400,
            show_advanced_display: false,
            connection_status: "Not Connected".to_string(),
            animation_progress: 0.0,
            connection_transition: 0.0,
        }
    }
    
    /// Set the animation progress for refresh button
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.refresh_animation_progress = progress;
        self
    }
    
    /// Set whether the application is scanning for devices
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }
    
    /// Set the connection state animation progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_state_transition = progress;
        self
    }
    
    /// Set the custom battery display component
    pub fn with_battery_display(mut self, display: RealTimeBatteryDisplay) -> Self {
        self.battery_display = Some(display);
        self
    }
    
    /// Update window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }
    
    /// Toggle advanced display
    pub fn toggle_advanced_display(&mut self) -> Command<Message> {
        self.show_advanced_display = !self.show_advanced_display;
        Command::none()
    }

    /// Get the current display mode
    pub fn is_advanced_display(&self) -> bool {
        self.show_advanced_display
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    pub fn with_battery_status(mut self, status: Option<AirPodsBatteryStatus>) -> Self {
        self.battery_status = status;
        self
    }

    /// Update the scanning state
    pub fn with_scanning(mut self, scanning: bool) -> Self {
        self.is_scanning = scanning;
        self
    }

    /// Update the window size for responsive design
    pub fn with_window_size(mut self, width: u32, height: u32) -> Self {
        self.window_width = width;
        self.window_height = height;
        self
    }

    /// Update the animation progress
    pub fn with_animation_progress(mut self, progress: f32) -> Self {
        self.animation_progress = progress;
        self
    }

    /// Update the connection transition progress
    pub fn with_connection_transition(mut self, progress: f32) -> Self {
        self.connection_transition = progress;
        self
    }

    /// Update the connection state
    pub fn with_connection(mut self, connected: bool, status: String) -> Self {
        self.is_connected = connected;
        self.connection_status = status;
        self
    }

    /// Create a new main window with the given battery status
    // Helper method to create battery display with proper lifetime
    fn create_battery_display(&self) -> Element<'static, Message, iced::Renderer<Theme>> {
        // Create battery status clone
        let battery_status = if let Some(status) = &self.battery_status {
            Some(crate::bluetooth::AirPodsBatteryStatus::new(status.battery.clone()))
        } else {
            None
        };
        
        // Choose display mode based on window size
        if self.window_width < 400 {
            // Compact mode for small windows
            self.create_compact_display(battery_status)
        } else if self.show_advanced_display && self.battery_display.is_some() {
            // Advanced animated display
            if let Some(status) = battery_status {
                RealTimeBatteryDisplay::create_static_view(status)
            } else {
                // Default placeholder
                RealTimeBatteryDisplay::create_empty_view()
            }
        } else {
            // Standard display
            if let Some(status) = battery_status {
                EnhancedBatteryDisplay::create_static_view(status.battery)
            } else {
                // No battery information
                text("Battery information not available")
                    .size(16)
                    .width(Length::Fill)
                    .horizontal_alignment(alignment::Horizontal::Center)
                    .into()
            }
        }
    }
    
    // Create a compact display for small screens
    fn create_compact_display(&self, battery_status: Option<AirPodsBatteryStatus>) -> Element<'static, Message, iced::Renderer<Theme>> {
        if let Some(status) = battery_status {
            // Create compact icons in a row
            let left = battery_with_label(
                "L", 
                status.battery.left, 
                status.battery.charging.left,
                60.0,
                self.refresh_animation_progress
            );
            
            let right = battery_with_label(
                "R", 
                status.battery.right, 
                status.battery.charging.right,
                60.0,
                self.refresh_animation_progress
            );
            
            let case = battery_with_label(
                "Case", 
                status.battery.case, 
                status.battery.charging.case,
                60.0,
                self.refresh_animation_progress
            );
            
            row![left, right, case]
                .spacing(10)
                .padding(5)
                .align_items(alignment::Alignment::Center)
                .width(Length::Fill)
                .into()
        } else {
            text("Battery information not available")
                .size(16)
                .width(Length::Fill)
                .horizontal_alignment(alignment::Horizontal::Center)
                .into()
        }
    }
    
    // Create device info section
    fn create_device_info(&self) -> Element<'static, Message, iced::Renderer<Theme>> {
        if let Some(name) = &self.device_name {
            let name_text = format!("Device: {}", name);
            
            // Create device info row based on available data
            let device_info_row = if self.window_width < 400 {
                // Compact mode - just show device name
                Row::new()
                    .push(text(name_text).size(16))
                    .spacing(5)
                    .width(Length::Fill)
            } else {
                // Full mode with all information
                let mut row: Row<'_, Message, Renderer<Theme>> = Row::new()
                    .push(text(name_text).size(16))
                    .spacing(5)
                    .width(Length::Fill);
                
                // Add signal strength if available
                if let Some(rssi) = self.signal_strength {
                    let signal_text = format!("Signal: {}dBm", rssi);
                    row = row.push(text(signal_text).size(16));
                }
                
                // Add connected time if available
                if let Some(time) = self.connected_time {
                    let formatted_time = format_time(time);
                    let time_text = format!("Connected for: {}", formatted_time);
                    row = row.push(text(time_text).size(16));
                }
                
                row
            };
            
            // Return device info row with connection indicator
            container(
                Column::new()
                    .push(
                        ConnectionStatus::new(self.is_connected, self.is_scanning)
                            .with_animation_progress(self.connection_state_transition)
                    )
                    .push(device_info_row)
                    .spacing(10)
                    .padding(5)
            )
            .style(theme::Container::Box)
            .padding(10)
            .width(Length::Fill)
            .into()
        } else {
            // Not connected to any device
            container(
                ConnectionStatus::new(self.is_connected, self.is_scanning)
                    .with_animation_progress(self.connection_state_transition)
            )
            .padding(10)
            .width(Length::Fill)
            .into()
        }
    }
    
    // Create action buttons section
    fn create_action_buttons(&self) -> Element<'static, Message, iced::Renderer<Theme>> {
        let action_text = if self.is_scanning {
            "Stop Scan"
        } else {
            "Start Scan"
        };
        
        let scan_button = button(text(action_text))
            .on_press(
                if self.is_scanning {
                    Message::StopScan
                } else {
                    Message::StartScan
                }
            )
            .style(if self.is_scanning {
                theme::Button::Destructive
            } else {
                theme::Button::Primary
            });
        
        let display_mode_button = button(
            text(
                if self.show_advanced_display {
                    "Simple Display"
                } else {
                    "Advanced Display"
                }
            )
        )
            .on_press(Message::ToggleDisplayMode);
            
        let settings_button = button(text("Settings"))
            .on_press(Message::OpenSettings);
            
        let exit_button = button(text("Exit"))
            .on_press(Message::Exit);
            
        // Choose button layout based on window size
        if self.window_width < 400 {
            // Compact vertical layout for small windows
            Column::new()
                .push(scan_button.width(Length::Fill))
                .push(display_mode_button.width(Length::Fill))
                .push(settings_button.width(Length::Fill))
                .push(exit_button.width(Length::Fill))
                .spacing(5)
                .width(Length::Fill)
                .into()
        } else {
            // Horizontal layout for larger windows
            row![
                scan_button,
                horizontal_space(Length::Fill),
                display_mode_button,
                settings_button,
                exit_button,
            ]
            .spacing(10)
            .padding(5)
            .into()
        }
    }
}

impl UiComponent for MainWindow {
    fn view(&self) -> Element<'static, Message, iced::Renderer<Theme>> {
        // Create header with title
        let title = text("RustPods Battery Monitor")
            .size(28)
            .width(Length::Fill)
            .horizontal_alignment(alignment::Horizontal::Center);
            
        // Build device information section
        let device_info = self.create_device_info();
        
        // Create battery display
        let battery_display = self.create_battery_display();
        
        // Create action buttons section
        let action_buttons = self.create_action_buttons();
        
        // Create the main content with responsive spacing
        let content = Column::new()
            .push(title)
            .push(vertical_space(Length::FillPortion(1)))
            .push(device_info)
            .push(vertical_space(Length::Units(20)))
            .push(battery_display)
            .push(vertical_space(Length::FillPortion(1)))
            .push(action_buttons)
            .spacing(10)
            .padding(20)
            .width(Length::Fill);
            
        container(content)
            .width(Length::Fill)
            .height(Length::Fill)
            .center_x()
            .center_y()
            .into()
    }
}

// Format time in a human-readable way
fn format_time(seconds: u64) -> String {
    if seconds < 60 {
        format!("{}s", seconds)
    } else if seconds < 3600 {
        format!("{}m {}s", seconds / 60, seconds % 60)
    } else {
        format!("{}h {}m", seconds / 3600, (seconds % 3600) / 60)
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::airpods::{AirPodsBattery, ChargingStatus};
    
    #[test]
    fn test_main_window_creation() {
        // Create with battery status
        let battery = AirPodsBattery {
            left: Some(80),
            right: Some(75),
            case: Some(90),
            charging: ChargingStatus {
                left: false,
                right: false,
                case: true,
            },
        };
        
        let battery_status = AirPodsBatteryStatus::new(battery);
        
        let window = MainWindow::new(
            Some(battery_status),
            false,
            true,
            Some("My AirPods".to_string()),
            Some(-65),
            Some(360),
        );
        
        assert!(window.is_connected);
        assert!(!window.is_scanning);
        assert_eq!(window.device_name, Some("My AirPods".to_string()));
        assert_eq!(window.signal_strength, Some(-65));
        assert_eq!(window.connected_time, Some(360));
    }
    
    #[test]
    fn test_format_time() {
        assert_eq!(format_time(30), "30s");
        assert_eq!(format_time(90), "1m 30s");
        assert_eq!(format_time(3600), "1h 0m");
        assert_eq!(format_time(3661), "1h 1m");
    }
    
    #[test]
    fn test_responsive_design() {
        // Create a basic window
        let window = MainWindow::empty()
            .with_window_size(300, 400); // Small window
            
        // Verify window size is set
        assert_eq!(window.window_width, 300);
        assert_eq!(window.window_height, 400);
    }
} 