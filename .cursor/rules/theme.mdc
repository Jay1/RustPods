---
description: 
globs: 
alwaysApply: false
---
# UI Theme Guidelines

This document outlines guidelines and best practices for implementing and using UI themes in the RustPods application, with specific focus on the Catppuccin Mocha color scheme.

## Theme Structure

- **Color Constants**:
  - Define color constants at the top of the theme module
  - Use `Color::from_rgb8()` for precise hexadecimal color values
  - Group colors by purpose (base colors, text colors, accents)
  - Use SCREAMING_SNAKE_CASE for color constant names
  - Include semantic names that describe the color's purpose

```rust
// Catppuccin Mocha Palette 
pub const ROSEWATER: Color = Color::from_rgb8(0xf5, 0xe0, 0xdc);
pub const FLAMINGO: Color = Color::from_rgb8(0xf2, 0xcd, 0xcd);
// ...

// Text colors
pub const TEXT: Color = Color::from_rgb8(0xcd, 0xd6, 0xf4);
pub const SUBTEXT1: Color = Color::from_rgb8(0xba, 0xc2, 0xde);
// ...
```

- **Theme Enum**:
  - Define a single Theme enum for the entire application
  - Include variants for each supported theme
  - Implement Default trait for the default theme

```rust
#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub enum Theme {
    #[default]
    CatppuccinMocha,
    // Add more theme variants as needed
}
```

## StyleSheet Implementations

- **Implement Required Traits**:
  - `application::StyleSheet` - For application background and text
  - `button::StyleSheet` - For button styling
  - `container::StyleSheet` - For container styling
  - `text_input::StyleSheet` - For text input styling
  - Add more as needed for other widgets

- **Consistent Patterns**:
  - Use match expressions on theme variants for all implementations
  - Maintain consistent styling across components
  - Define all states (active, hovered, pressed, disabled)
  - Keep border radius, padding, and spacing consistent

```rust
impl button::StyleSheet for Theme {
    type Style = ();

    fn active(&self, _style: &Self::Style) -> button::Appearance {
        match self {
            Theme::CatppuccinMocha => button::Appearance {
                background: Some(SURFACE0.into()),
                text_color: TEXT,
                border_radius: 4.0,
                // ...
            },
        }
    }
    
    // Implement other states...
}
```

## Catppuccin Mocha Color Scheme

The Catppuccin Mocha theme is a warm, dark color scheme with soft pastel accents. Follow these guidelines for consistent UI styling:

- **Application Background**: Use `BASE` for the main application background
- **Text Colors**:
  - Primary text: `TEXT`
  - Secondary text: `SUBTEXT1` 
  - Placeholder text: `OVERLAY1`

- **Button Styling**:
  - Active: background `SURFACE0`, border `OVERLAY0`, text `TEXT`
  - Hovered: background `SURFACE1`, border `OVERLAY1`, text `SUBTEXT1`
  - Pressed: background `SURFACE2`, same text and border as active
  - Disabled: background `MANTLE`, text `OVERLAY0`

- **Container Styling**:
  - Default: transparent background, text `TEXT`
  - Add borders when needed using `OVERLAY0` or `OVERLAY1`

- **Text Input Styling**:
  - Active: background `SURFACE0`, border `OVERLAY0`
  - Focused: background `SURFACE0`, border `BLUE`
  - Placeholder color: `OVERLAY1`
  - Value color: `TEXT`
  - Selection color: `SURFACE2`

## Theme Integration

- **Application Theme**:
  - Override the `theme()` method in the Application implementation
  - Return the appropriate theme variant
  - Allow for theme configuration if multiple themes are supported

```rust
impl Application for AppState {
    type Theme = crate::ui::theme::Theme;
    // ...
    
    fn theme(&self) -> Self::Theme {
        crate::ui::theme::Theme::CatppuccinMocha
    }
}
```

- **Consistency**:
  - Ensure all UI components use the theme colors consistently
  - Never use hardcoded colors in UI components
  - Import theme colors when needed rather than redefining them

## Testing Themes

- **Theme Color Tests**:
  - Test color constants match expected values
  - Verify color conversions are correct

```rust
#[test]
fn test_color_constants() {
    assert_eq!(TEXT, Color::from_rgb8(0xcd, 0xd6, 0xf4));
    assert_eq!(BASE, Color::from_rgb8(0x1e, 0x1e, 0x2e));
}
```

- **StyleSheet Tests**:
  - Test each StyleSheet implementation returns expected values
  - Verify theme consistency across different components
  - Test all states (active, hovered, pressed, disabled)

```rust
#[test]
fn test_button_styles() {
    let theme = Theme::CatppuccinMocha;
    let active = <Theme as button::StyleSheet>::active(&theme, &());
    
    assert_eq!(active.background.unwrap(), SURFACE0.into());
    assert_eq!(active.text_color, TEXT);
    // ...
}
```

## Future Theme Expansion

- **New Theme Variants**:
  - Add new variants to the Theme enum
  - Implement StyleSheet traits for new variants
  - Consider adding a theme switcher in the settings UI

- **Custom Theme Options**:
  - Consider supporting user-configurable themes
  - Allow theme customization via settings
  - Store theme preferences in the application config

